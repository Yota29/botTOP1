import logging
logging.basicConfig(level=logging.DEBUG)

import logging
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, ConversationHandler, filters
)

logging.basicConfig(level=logging.INFO)

ADMIN_ID = 1859111819

ASK_PHOTO, ASK_TEXT, ASK_REPEAT = range(3)

message_queue = {}

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ.")
    return ASK_PHOTO

# –§–æ—Ç–æ
async def receive_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        await update.message.reply_text("‚ùó –≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ.")
        return ASK_PHOTO

    context.user_data["photo"] = update.message.photo[-1].file_id
    await update.message.reply_text("‚úèÔ∏è –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∫ —Ñ–æ—Ç–æ.")
    return ASK_TEXT

# –¢–µ–∫—Å—Ç
async def receive_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    photo = context.user_data.get("photo")
    user = update.effective_user
    user_id = user.id
    username = user.username or user.full_name

    if not photo:
        await update.message.reply_text("‚ùó –û—à–∏–±–∫–∞: —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return ConversationHandler.END

    if user_id not in message_queue:
        message_queue[user_id] = {
            "username": username,
            "items": []
        }

    message_queue[user_id]["items"].append({
        "photo": photo,
        "text": text
    })

    count = len(message_queue[user_id]["items"])

    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"üì® –í–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–µ(–π), —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–î–ê ‚úÖ", callback_data=f"approve_{user_id}")]
        ])
    )

    await update.message.reply_text(
        "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n‚ùì –•–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω–æ?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÅ –î–∞, —Ö–æ—á—É –µ—â—ë", callback_data="repeat_yes")],
        ])
    )

    return ASK_REPEAT

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
async def handle_repeat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "repeat_yes":
        await query.edit_message_text("üì∑ –•–æ—Ä–æ—à–æ! –û—Ç–ø—Ä–∞–≤—å —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ.")
        return ASK_PHOTO
    else:
        await query.edit_message_text("üëå –•–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É!")
        return ConversationHandler.END

# –ö–Ω–æ–ø–∫–∞ –î–ê (–∞–¥–º–∏–Ω)
async def handle_approve(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    if not data.startswith("approve_"):
        return

    user_id = int(data.split("_")[1])
    if user_id not in message_queue or not message_queue[user_id]["items"]:
        await query.edit_message_text("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
        return

    item = message_queue[user_id]["items"].pop(0)
    username = message_queue[user_id]["username"]

    await context.bot.send_message(chat_id=ADMIN_ID, text=f"üì® –û–¢: @{username}")
    await context.bot.send_photo(chat_id=ADMIN_ID, photo=item["photo"], caption=item["text"])

    remaining = len(message_queue[user_id]["items"])
    if remaining > 0:
        await query.edit_message_text(
            text=f"üì® –û—Å—Ç–∞–ª–æ—Å—å {remaining} —Å–æ–æ–±—â–µ–Ω–∏–µ(–π), —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–î–ê ‚úÖ", callback_data=f"approve_{user_id}")]
            ])
        )
    else:
        del message_queue[user_id]
        await query.edit_message_text("‚úÖ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã.")

# /cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# MAIN
def main():
    application = ApplicationBuilder().token("8049203778:AAH_SXsDc_gwo5pEvQnsPOMzCn6tiHS9lQE").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_PHOTO: [MessageHandler(filters.PHOTO, receive_photo)],
            ASK_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_text)],
            ASK_REPEAT: [CallbackQueryHandler(handle_repeat, pattern="^repeat_.*")]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_user=True,
        per_chat=True
    )

    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(handle_approve, pattern="^approve_"))

    application.run_polling()

if __name__ == "__main__":
    main()
